% 求g的pdf：MLEstimate
data_g_raw = textread('../data/rr/RR_e0202_MLI_normalFit.txt', '%d', 'delimiter', '\n');
% data_g_raw = textread('D:/Research/Project/paper1/data/rr/RR_e0108_MLIII_normalFit.txt', '%d', 'delimiter', '\n');
data_g = data_g_raw / 1000;

param_g = mle(data_g');
m_g = param_g(1);
S_g = param_g(2);

% [m_g, S_g] = Gaussian_ML_estimate(data_g');

% 参数：确定quantizer N=4/8/16/32/64
N = 32;
N_b = log2(N);

num_key = 255; % 根据BCH码的有效编码长度来定：(204, 80, 37)/(255, 131, 37)
num_ipi = ceil(num_key / N_b);
num_coder_capacity = 7; % BCH码的纠错能力

region = Determine_quantizer(m_g, S_g, N);

% 求（g, g'）的pdf：Parzen Guassian
[X_g1, X_g2] = textread('../data/sample/gi_other_e0103_e0123.txt', '%d %d', 'delimiter', '\n');
X = [X_g1 X_g2] / 1000;
% 
% h1 = 0.001;
% h2 = 0.05;
% num_region = length(region);
% grid_g1 = [region(1):h2:region(2) region(2):h1:region(num_region - 1) region(num_region - 1):h2:region(num_region)];
% grid_g2 = grid_g1;
% [x_g1, x_g2] = meshgrid(grid_g1, grid_g2);
% x_g1 = x_g1(:);
% x_g2 = x_g2(:);
% xi_gg = [x_g1 x_g2];
% 
% [pdf_gg, x_gg] = ksdensity(X, xi_gg);
% 
% pdf_gg_reshape = reshape(pdf_gg, length(grid_g1), length(grid_g2));

% 求量化后 g=g' 的概率：pdf（g, g'）积分
% p_gg = 0;
% start_point = 1;
% for i = 1:length(region)-1
%     if i == 1 || i == length(region) - 1
%        hh = 0.05;
%     else
%         hh = 0.001;
%     end
%     
%     range = region(i):hh:region(i+1);
%     num_range = length(range);
% 
%     grid_g1_2 = grid_g1(start_point:start_point + num_range - 1);
%     grid_g2_2 = grid_g1_2;
%     pdfxx = pdf_gg_reshape(start_point:start_point + num_range - 1, start_point:start_point + num_range - 1);
%     
%     p_gg = p_gg + trapz(grid_g2_2, trapz(grid_g1_2, pdfxx, 2));
%     
%     start_point = start_point + num_range - 1;
% end
% disp('概率密度估计法P(g=g)=');
% disp(p_gg)

% 求量化后 g=g' 的概率：计数
sum_gg = zeros(1, length(region) - 1);
X = X';
[d_gg, num_X] = size(X);

% temp temp temp
% probility_hamming_mul = [0,1.23958454283333e-182,6.25581394973090e-180,2.12531869967945e-177,5.46425842216240e-175,1.13330845044650e-172,1.97398878276755e-170,2.96838008830496e-168,3.93198043688996e-166,4.65865526806878e-164,4.99663978577974e-162,4.89843576552158e-160,4.42428601660202e-158,3.70605965091345e-156,2.89535716278823e-154,2.11983320882407e-152,1.46056430721195e-150,9.50474885065333e-149,5.86076961525130e-147,3.43398444140926e-145,1.91678959871786e-143,1.02158072565804e-141,5.20937568014148e-140,2.54637357208043e-138,1.19513704583102e-136,5.39441341907760e-135,2.34486141802637e-133,9.82884045424486e-132,3.97759891478016e-130,1.55580515938010e-128,5.88777784532602e-127,2.15786455374298e-125,7.66583127260372e-124,2.64189935843522e-122,8.83956919646909e-121,2.87354475343421e-119,9.08178619095381e-118,2.79233334918630e-116,8.35728997207413e-115,2.43618372538775e-113,6.92039495271782e-112,1.91665854454897e-110,5.17792999172910e-109,1.36508068949323e-107,3.51345001639652e-106,8.83192242101205e-105,2.16913300784703e-103,5.20692588569273e-102,1.22204602594921e-100,2.80507012866351e-99,6.29914669367026e-98,1.38428852523127e-96,2.97781053009685e-95,6.27199394821850e-94,1.29377620137382e-92,2.61432163884541e-91,5.17608493795625e-90,1.00433254117338e-88,1.91017859443520e-87,3.56182643119084e-86,6.51255805754967e-85,1.16784219006145e-83,2.05418749281293e-82,3.54474699811330e-81,6.00180492141367e-80,9.97214734697797e-79,1.62615147429027e-77,2.60286023156067e-76,4.08984745934981e-75,6.30921870535224e-74,9.55650474559135e-73,1.42140395669010e-71,2.07619431686078e-70,2.97841257540795e-69,4.19662103656281e-68,5.80820204498821e-67,7.89654649204854e-66,1.05465429218401e-64,1.38382745645942e-63,1.78390471413649e-62,2.25941415337735e-61,2.81169836838989e-60,3.43797061914437e-59,4.13052888652848e-58,4.87625540014393e-57,5.65652104234157e-56,6.44758629488398e-55,7.22154359783833e-54,7.94778421448782e-53,8.59490346421906e-52,9.13289156575482e-51,9.53540435585651e-50,9.78187879404419e-49,9.85925932193405e-48,9.76313500235814e-47,9.49815061550254e-46,9.07763902928596e-45,8.52251483493241e-44,7.85955642972564e-43,7.11927231960027e-42,6.33358757679186e-41,5.53359329513592e-40,4.74757639156743e-39,3.99949528443692e-38,3.30799869754227e-37,2.68601167602878e-36,2.14084595911812e-35,1.67473987793558e-34,1.28570110918390e-33,9.68515146390620e-33,7.15790947888618e-32,5.18938051137013e-31,3.69000429905248e-30,2.57305463707794e-29,1.75916567341158e-28,1.17901900651991e-27,7.74475483854301e-27,4.98516312850267e-26,3.14371583519086e-25,1.94178843631636e-24,1.17449903886170e-23,6.95484732495129e-23,4.03081752442251e-22,2.28586077642947e-21,1.26803653415256e-20,6.87870641362034e-20,3.64783761386944e-19,1.89047642283304e-18,9.57105029518209e-18,4.73192364707906e-17,2.28367385723059e-16,1.07539424072848e-15,4.93909829360152e-15,2.21142578614731e-14,9.64781149187023e-14,4.09913091433228e-13,1.69520811517405e-12,6.81977700151849e-12,2.66726268052559e-11,1.01350553580300e-10,3.73895178792179e-10,1.33818663311089e-09,4.64286113482606e-09,1.56024812182159e-08,5.07403129046931e-08,1.59532895987776e-07,4.84442630276809e-07,1.41923853347217e-06,4.00664574628204e-06,1.08861156225491e-05,2.84278518234579e-05,7.12461798005627e-05,0.000171097276797264,0.000393053236976597,0.000862162309155666,0.00180215680670489,0.00358200384101862,0.00675420554058988,0.0120513565467594,0.0202916214600533,0.0321457282734508,0.0477593140119776,0.0663159011861585,0.0857422217659145,0.102822312319998,0.113898684822390,0.116056882729643,0.108327237713739,0.0922567814967993,0.0714351090646500,0.0501307621935237,0.0318460302947581,0.0182805105791645,0.00948551488214823,0.00445388630572557,0.00189600334198771,0.000733559217471362,0.000258684522209026,8.34027249870206e-05,2.46622459623284e-05,6.70942393880538e-06,1.68444184149931e-06,3.91385542001393e-07,8.43961390661764e-08,1.69327215818407e-08,3.16854374781006e-09,5.54229909074882e-10,9.08060839079622e-11,1.39625418755541e-11,2.01838836470630e-12,2.74752870239498e-13,3.52718293869059e-14,4.27623190608942e-15,4.90222489234055e-16,5.32023026295877e-17,5.47189493714959e-18,5.33877155476097e-19,4.94573846502247e-20,4.35374775117425e-21,3.64470172916450e-22,2.90349933148192e-23,2.20246302225654e-24,1.59170310202056e-25,1.09646800737581e-26,7.20277645865007e-28,4.51377867379621e-29,2.69935961424382e-30,1.54093192506552e-31,8.39864617263100e-33,4.37137905534844e-34,2.17305592715958e-35,1.03182590942128e-36,4.67999018410441e-38,2.02761938904424e-39,8.39094565651013e-41,3.31648600544622e-42,1.25177858352174e-43,4.51104648542695e-45,1.55175928822936e-46,5.09381611605103e-48,1.59509120769092e-49,4.76297695250076e-51,1.35557681537821e-52,3.67534135534984e-54,9.48737079203784e-56,2.33015639187884e-57,5.44125400327743e-59,1.20708032053746e-60,2.54159797912093e-62,5.07434061534946e-64,9.59571231581884e-66,1.71661107908520e-67,2.90121458585272e-69,4.62545620402082e-71,6.94511159626406e-73,9.80296312456258e-75,1.29808124961620e-76,1.60887236644393e-78,1.86167991474018e-80,2.00539637607203e-82,2.00442556644020e-84,1.85208108494641e-86,1.57528537998546e-88,1.22729033542491e-90,8.70814704007291e-93,5.58914034192134e-95,3.21866594654633e-97,1.64674611940685e-99,7.39389724530417e-102,2.86844284037548e-104,9.42015192403021e-107,2.54647941015272e-109,5.44037370091139e-112,8.61306772649071e-115,8.98331340767361e-118,0];
% match_key_gg = 0;
% for i = 1:num_coder_capacity+1
%     match_key_gg = match_key_gg + probility_hamming_mul(i);
% end
% disp('P(key_g=key_g)=');
% disp(match_key_gg)
% 
% probility_hamming_mul_imposter = [0,4.40444596589510e-75,5.59364637662074e-73,4.71730844422856e-71,2.97190431982985e-69,1.49189596853768e-67,6.21623320217088e-66,2.21120295331927e-64,6.85472915521524e-63,1.88124233480002e-61,4.62785614355914e-60,1.03074977741834e-58,2.09585788072910e-57,3.91764203855395e-56,6.77192409514709e-55,1.08802247127626e-53,1.63203370689856e-52,2.29444738791193e-51,3.03376932398831e-50,3.78422805146608e-49,4.46538910068914e-48,4.99698304120235e-47,5.31497287104986e-46,5.38429860410342e-45,5.20482198392180e-44,4.80925551310294e-43,4.25434141540167e-42,3.60831179303320e-41,2.93819674573179e-40,2.29989883198550e-39,1.73259045341547e-38,1.25752532908214e-37,8.80267730350798e-37,5.94847587475022e-36,3.88400483583767e-35,2.45247162489683e-34,1.49873265964847e-33,8.87087709353268e-33,5.08908212204406e-32,2.83161748840012e-31,1.52907344372583e-30,8.01831196094852e-30,4.08552085626638e-29,2.02375800553302e-28,9.75083402659794e-28,4.57205773244336e-27,2.08724374740715e-26,9.28157325969146e-26,4.02201507917610e-25,1.69909616609115e-24,7.00027620425600e-24,2.81383651345982e-23,1.10388970912052e-22,4.22810586698615e-22,1.58162478727167e-21,5.78011967709018e-21,2.06432845609314e-20,7.20704145193838e-20,2.46033484047723e-19,8.21501633172349e-19,2.68357200168366e-18,8.57863180862110e-18,2.68428156591115e-17,8.22327527331017e-17,2.46698258198220e-16,7.24913343317807e-16,2.08687174590609e-15,5.88684716380028e-15,1.62754009822051e-14,4.41086954153661e-14,1.17203104960371e-13,3.05388372078668e-13,7.80436950864785e-13,1.95643783572231e-12,4.81177954189433e-12,1.16124279610639e-11,2.75031188550557e-11,6.39358217537438e-11,1.45904824001646e-10,3.26900681622875e-10,7.19181499568028e-10,1.55378719041989e-09,3.29706062356382e-09,6.87218660090151e-09,1.40716201827570e-08,2.83087888381711e-08,5.59592337497152e-08,1.08702419582481e-07,2.07522801020538e-07,3.89396716520657e-07,7.18220610469580e-07,1.30226813985912e-06,2.32143451017792e-06,4.06875080815144e-06,7.01210245658493e-06,1.18836683737637e-05,1.98061139562282e-05,3.24656919487967e-05,5.23426462030497e-05,8.30080348874887e-05,0.000129492534424214,0.000198726166690228,0.000300037545786616,0.000445686839856928,0.000651388458251205,0.000936758639959531,0.00132560184899694,0.00184593154673083,0.00252960989736749,0.00341149224690275,0.00452798061860890,0.00591492963691216,0.00760490953316097,0.00962391206407381,0.0119876799394424,0.0146979380126864,0.0177388907049405,0.0210744086152423,0.0246463422788093,0.0283743604385916,0.0321576084970282,0.0358783235296964,0.0394073389587982,0.0426111876545849,0.0453602965354716,0.0475375907691190,0.0490467206347496,0.0498191099360291,0.0498191099359750,0.0490467206345901,0.0475375907688606,0.0453602965351262,0.0426111876541672,0.0394073389583258,0.0358783235291875,0.0321576084965011,0.0283743604380630,0.0246463422782953,0.0210744086147554,0.0177388907044906,0.0146979380122798,0.0119876799390832,0.00962391206376296,0.00760490953289747,0.00591492963669321,0.00452798061843044,0.00341149224675996,0.00252960989725540,0.00184593154664445,0.00132560184893156,0.000936758639910930,0.000651388458215719,0.000445686839831480,0.000300037545768679,0.000198726166677811,0.000129492534415767,8.30080348818418e-05,5.23426461993405e-05,3.24656919464029e-05,1.98061139547093e-05,1.18836683728169e-05,7.01210245600496e-06,4.06875080780231e-06,2.32143450997142e-06,1.30226813973912e-06,7.18220610401047e-07,3.89396716482208e-07,2.07522800999347e-07,1.08702419571006e-07,5.59592337436114e-08,2.83087888349820e-08,1.40716201811205e-08,6.87218660007679e-09,3.29706062315564e-09,1.55378719022154e-09,7.19181499473390e-10,3.26900681578548e-10,1.45904823981265e-10,6.39358217445463e-11,2.75031188509825e-11,1.16124279592938e-11,4.81177954113963e-12,1.95643783540664e-12,7.80436950735288e-13,3.05388372026568e-13,1.17203104939815e-13,4.41086954074159e-14,1.62754009791911e-14,5.88684716268033e-15,2.08687174549831e-15,7.24913343172360e-16,2.46698258147403e-16,8.22327527157135e-17,2.68428156532865e-17,8.57863180671096e-18,2.68357200107064e-18,8.21501632979859e-19,2.46033483988602e-19,7.20704145016250e-20,2.06432845557166e-20,5.78011967559340e-21,1.58162478685190e-21,4.22810586583621e-22,1.10388970881291e-22,2.81383651265653e-23,7.00027620220896e-24,1.69909616558231e-24,4.02201507794264e-25,9.28157325677703e-26,2.08724374673619e-26,4.57205773093893e-27,9.75083402331418e-28,2.02375800483557e-28,4.08552085482572e-29,8.01831195805581e-30,1.52907344316154e-30,2.83161748733128e-31,5.08908212007950e-32,8.87087709003086e-33,1.49873265904355e-33,2.45247162388486e-34,3.88400483419939e-35,5.94847587218568e-36,8.80267729962947e-37,1.25752532851595e-37,1.73259045261841e-38,2.29989883090456e-39,2.93819674432111e-40,3.60831179126367e-41,4.25434141327085e-42,4.80925551064310e-43,5.20482198120347e-44,5.38429860123233e-45,5.31497286815653e-46,4.99698303842558e-47,4.46538909815646e-48,3.78422804927557e-49,3.03376932219625e-50,2.29444738652897e-51,1.63203370589492e-52,1.08802247059367e-53,6.77192409081327e-55,3.91764203599669e-56,2.09585787933381e-57,1.03074977671855e-58,4.62785614035536e-60,1.88124233347214e-61,6.85472915028243e-63,2.21120295169715e-64,6.21623319752257e-66,1.49189596740063e-67,2.97190431752146e-69,4.71730844049463e-71,5.59364637210920e-73,4.40444596227565e-75,0];
% match_key_gi_g = 0;
% for i = 1:num_coder_capacity+1
%     match_key_gi_g = match_key_gi_g + probility_hamming_mul_imposter(i);
% end
% disp('P(key_g=key_i_g)=');
% disp(match_key_gi_g)
% temp temp temp

for i = 1:length(region)-1
    for j = 1:num_X
       if (X(1, j) < region(i+1) && X(1, j) >= region(i) && X(2, j) < region(i+1) && X(2, j) >= region(i))
           sum_gg(i) = sum_gg(i) + 1;
       end
    end
end

p_gg_2 = sum(sum_gg) / num_X;
disp('计数法P(g=g)=');
disp(p_gg_2)

% 求haming(g, g')的概率分布
g1_bitString = 2 * ones(1, N_b);
g2_bitString = 2 * ones(1, N_b);
hamming = zeros(1, N_b + 1);
for i = 1:num_X
   for j = 1:length(region)-1
       if X(1, i) < region(j+1) && X(1, i) >= region(j)
           if j == 1 || j == length(region)-1
               g1_bitString = zeros(1, N_b);
           else
               g1_bitString = Dec2binArr(j-1, N_b);
           end
       end
       
       if X(2, i) < region(j+1) && X(2, i) >= region(j)
           if j == 1 || j == length(region)-1
               g2_bitString = zeros(1, N_b);
           else
               g2_bitString = Dec2binArr(j-1, N_b);
           end
       end
   end
   hamming_gg = sum(xor(g1_bitString, g2_bitString));
   hamming(hamming_gg + 1) = hamming(hamming_gg + 1) + 1;
end
probility_hamming_single = hamming / num_X;

% 求Y的概率分布，Y取值为hamming(key_g, key_g')
i = 1;
indices = ones(1, N_b+1);
space = repmat((0:1:num_ipi), N_b+1, 1);
probility_hamming_mul = zeros(1, N_b .* num_ipi + 1);
num_watch_all = 0;
num_watch_ipi = 0;

num_ipi_factorial = factorial(num_ipi);

while i <= size(space, 1)
    enum_events = zeros(1, size(space, 1));
    sum_events = 0;

    for j = 1:size(space, 1)
        sum_events = sum_events + space(j, indices(j));
        enum_events(j) = enum_events(j) + space(j, indices(j));
        num_watch_all = num_watch_all + 1;
    end
    
    if sum_events == num_ipi
        num_watch_ipi = num_watch_ipi + 1;
        hamming_mul = 0;
        temp_prob = 1;
        temp_factorial = 1;
        for k = 1:size(enum_events, 2)
           hamming_mul = hamming_mul + (k-1) .* enum_events(k);
        end
        for k = 1:size(space, 1)
           temp_prob = temp_prob .* probility_hamming_single(k) .^ enum_events(k);
           temp_factorial = temp_factorial .* factorial(enum_events(k));
        end
        probility_hamming_mul(hamming_mul+1) = probility_hamming_mul(hamming_mul+1) + temp_prob .* (num_ipi_factorial / temp_factorial);
    end
    
    i = 1;
    while i <= size(space, 1) && indices(i) + 1 == size(space(i, :), 2)
       indices(i) = indices(i) + 1;
       
       indices(i) = 1;
       i = i + 1;
    end
    
    if i <= size(space, 1)
        indices(i) = indices(i) + 1;
    end
end

% 求key_g = key_g'的成功率
match_key_gg = 0;
for i = 1:num_coder_capacity+1
    match_key_gg = match_key_gg + probility_hamming_mul(i);
end
disp('P(key_g=key_g)=');
disp(match_key_gg)

% g & i_g的求解 %

% 求（g, i_g）的成功匹配概率：g与i_g独立同分布且为正态分布
p_gi_g = 0;
pdf_gi_g = @(x, y)(2.* pi.* S_g.^2).^(-1) .* exp((-1/2) .* ((x - m_g).^2 + (y - m_g).^2) / (S_g.^2));
for i = 1:length(region)-1
    p_gi_g = p_gi_g + integral2(pdf_gi_g, region(i), region(i+1),region(i), region(i+1));
end
disp('P(g=i_g)=');
disp(p_gi_g)

% 求hamming(g, i_g)的概率分布
probility_hamming_single_imposter = zeros(1, N_b+1);

g_bitString = 2 * ones(1, N_b);
i_g_bitString = 2 * ones(1, N_b);
for i = 1:length(region)-1
   for j = 1:length(region)-1
       if i == 1 || i == length(region)-1
           g_bitString = zeros(1, N_b);
       else
           g_bitString = Dec2binArr(i-1, N_b);
       end
       
       if j == 1 || j == length(region)-1
           i_g_bitString = zeros(1, N_b);
       else
           i_g_bitString = Dec2binArr(j-1, N_b);
       end
       
       hamming = sum(xor(g_bitString, i_g_bitString));
       temp_prob = integral2(pdf_gi_g, region(i), region(i+1), region(j), region(j+1));
       probility_hamming_single_imposter(hamming+1) = probility_hamming_single_imposter(hamming+1) + temp_prob;
   end
end

% 求Y的概率分布，Y取值为hamming(key_g, key_i_g)
i = 1;
indices = ones(1, N_b+1);
space = repmat((0:1:num_ipi), N_b+1, 1);
probility_hamming_mul_imposter = zeros(1, N_b .* num_ipi + 1);
num_watch_all = 0;
num_watch_ipi = 0;

num_ipi_factorial = factorial(num_ipi);

while i <= size(space, 1)
    enum_events = zeros(1, size(space, 1));
    sum_events = 0;

    for j = 1:size(space, 1)
        sum_events = sum_events + space(j, indices(j));
        enum_events(j) = enum_events(j) + space(j, indices(j));
        num_watch_all = num_watch_all + 1;
    end
    
    if sum_events == num_ipi
        num_watch_ipi = num_watch_ipi + 1;
        hamming_mul = 0;
        temp_prob = 1;
        temp_factorial = 1;
        for k = 1:size(enum_events, 2)
           hamming_mul = hamming_mul + (k-1) .* enum_events(k);
        end
        for k = 1:size(space, 1)
           temp_prob = temp_prob .* probility_hamming_single_imposter(k) .^ enum_events(k);
           temp_factorial = temp_factorial .* factorial(enum_events(k));
        end
        probility_hamming_mul_imposter(hamming_mul+1) = probility_hamming_mul_imposter(hamming_mul+1) + temp_prob .* (num_ipi_factorial / temp_factorial);
    end
    
    i = 1;
    while i <= size(space, 1) && indices(i) + 1 == size(space(i, :), 2)
       indices(i) = indices(i) + 1;
       
       indices(i) = 1;
       i = i + 1;
    end
    
    if i <= size(space, 1)
        indices(i) = indices(i) + 1;
    end
end

% 求key_g = key_i_g的成功率
match_key_gi_g = 0;
for i = 1:num_coder_capacity+1
    match_key_gi_g = match_key_gi_g + probility_hamming_mul_imposter(i);
end
disp('P(key_g=key_i_g)=');
disp(match_key_gi_g)